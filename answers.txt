1.Какие концепции лежат в основе стандартной библиотеки?
1) В библиотеке должно быть достаточно много функционала чтобы 
он использовался в каждой программе.
2) Библиотека не должна быть переполнена ненужными вещами потому что 
это затрудняет нахождение нужной функции.

арпоо
2.Зачем в проектах используются системы контроля версий?
Система контроля версий позволяет хранить несколько версий 
одного и того же документа, работать над одним документом 
одновременно нескольким людям (не мешая друг другу), при необходимости 
возвращаться к более ранним версиям, определять, кто и когда сделал 
какое-либо изменение.


3.Из каких основных идей состоит взаимодействие с GIT?
1) Посредством веток можно добиться распределенности обязанностей 
между людьми так, чтобы они никому не мешали.
2) Посредством наличия возможности отката к предыдущим коммитам 
и точным логам изменений можно всегда вернуться к нужной версии программы.
3) Есть возможность ограничить части программы в которые тот или 
иной человек имеет доступ.


4.Когда следует создавать отдельные ветки для разработки?
Когда предстоят изменения, слишком крупные для одного коммита.


5.Какие основные элементы содержатся в библиотеке chrono?
Класс Duration	Описывает тип, содержащий интервал времени.
Класс time_point	Описывает тип, представляющий момент времени.
Структура steady_clock	Представляет так называемые устойчивые часы, 
то есть ход которых не подвержен внешним изменениям.
Структура system_clock	Представляет время системы.
Структура high_resolution_clock  Представляет таймер с минимально 
возможным периодом отсчетов, доступным системе.
Функция duration_cast	Приводит объект duration к указанному типу.
Функция time_point_cast	Приводит объект time_point к указанному типу.


6.Различия Merge и Rebase.
Merge. 
Слияние принимает содержимое ветки источника и объединяет 
их с целевой веткой. В этом процессе изменяется только целевая 
ветка. История исходных веток остается неизменной.
Однако история коммитов может быть заполнена (загрязнена) множеством 
коммитов.
Rebase.  
Rebase сжимает все изменения в один «патч». Затем он интегрирует патч 
в целевую ветку. В отличие от слияния, перемещение перезаписывает 
историю, потому что она передает завершенную работу из одной ветки в другую. 
В процессе устраняется нежелательная история.
Но если сделать перемещение неправильно, история изменится, и это может 
привести к серьезным проблемам.